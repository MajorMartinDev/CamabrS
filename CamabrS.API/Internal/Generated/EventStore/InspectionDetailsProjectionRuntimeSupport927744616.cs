// <auto-generated/>
#pragma warning disable
using CamabrS.API.Inspection.GettingDetails;
using Marten;
using Marten.Events.Aggregation;
using Marten.Internal.Storage;
using System;
using System.Linq;

namespace Marten.Generated.EventStore
{
    // START: InspectionDetailsProjectionLiveAggregation927744616
    public class InspectionDetailsProjectionLiveAggregation927744616 : Marten.Events.Aggregation.SyncLiveAggregatorBase<CamabrS.API.Inspection.GettingDetails.InspectionDetails>
    {
        private readonly CamabrS.API.Inspection.GettingDetails.InspectionDetailsProjection _inspectionDetailsProjection;

        public InspectionDetailsProjectionLiveAggregation927744616(CamabrS.API.Inspection.GettingDetails.InspectionDetailsProjection inspectionDetailsProjection)
        {
            _inspectionDetailsProjection = inspectionDetailsProjection;
        }



        public override CamabrS.API.Inspection.GettingDetails.InspectionDetails Build(System.Collections.Generic.IReadOnlyList<Marten.Events.IEvent> events, Marten.IQuerySession session, CamabrS.API.Inspection.GettingDetails.InspectionDetails snapshot)
        {
            if (!events.Any()) return null;
            CamabrS.API.Inspection.GettingDetails.InspectionDetails inspectionDetails = null;
            var usedEventOnCreate = snapshot is null;
            snapshot ??= Create(events[0], session);;
            if (snapshot is null)
            {
                usedEventOnCreate = false;
                snapshot = CreateDefault(events[0]);
            }

            foreach (var @event in events.Skip(usedEventOnCreate ? 1 : 0))
            {
                snapshot = Apply(@event, snapshot, session);
            }

            return snapshot;
        }


        public CamabrS.API.Inspection.GettingDetails.InspectionDetails Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<CamabrS.API.Inspection.InspectionOpened> event_InspectionOpened45:
                    return CamabrS.API.Inspection.GettingDetails.InspectionDetailsProjection.Create(event_InspectionOpened45);
                    break;
            }

            return null;
        }


        public CamabrS.API.Inspection.GettingDetails.InspectionDetails Apply(Marten.Events.IEvent @event, CamabrS.API.Inspection.GettingDetails.InspectionDetails aggregate, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<CamabrS.API.Inspection.InspectionClosed> event_InspectionClosed52:
                    aggregate = _inspectionDetailsProjection.Apply(event_InspectionClosed52.Data, aggregate);
                    break;
                case Marten.Events.IEvent<CamabrS.API.Inspection.InspectionCompleted> event_InspectionCompleted55:
                    aggregate = _inspectionDetailsProjection.Apply(event_InspectionCompleted55.Data, aggregate);
                    break;
                case Marten.Events.IEvent<CamabrS.API.Inspection.InspectionLocked> event_InspectionLocked48:
                    aggregate = _inspectionDetailsProjection.Apply(event_InspectionLocked48.Data, aggregate);
                    break;
                case Marten.Events.IEvent<CamabrS.API.Inspection.InspectionReopened> event_InspectionReopened54:
                    aggregate = _inspectionDetailsProjection.Apply(event_InspectionReopened54.Data, aggregate);
                    break;
                case Marten.Events.IEvent<CamabrS.API.Inspection.InspectionResultSubmitted> event_InspectionResultSubmitted50:
                    aggregate = _inspectionDetailsProjection.Apply(event_InspectionResultSubmitted50.Data, aggregate);
                    break;
                case Marten.Events.IEvent<CamabrS.API.Inspection.InspectionReviewed> event_InspectionReviewed53:
                    aggregate = _inspectionDetailsProjection.Apply(event_InspectionReviewed53.Data, aggregate);
                    break;
                case Marten.Events.IEvent<CamabrS.API.Inspection.InspectionSigned> event_InspectionSigned51:
                    aggregate = _inspectionDetailsProjection.Apply(event_InspectionSigned51.Data, aggregate);
                    break;
                case Marten.Events.IEvent<CamabrS.API.Inspection.InspectionUnlocked> event_InspectionUnlocked49:
                    aggregate = _inspectionDetailsProjection.Apply(event_InspectionUnlocked49.Data, aggregate);
                    break;
                case Marten.Events.IEvent<CamabrS.API.Inspection.SpecialistAssigned> event_SpecialistAssigned46:
                    aggregate = _inspectionDetailsProjection.Apply(event_SpecialistAssigned46.Data, aggregate);
                    break;
                case Marten.Events.IEvent<CamabrS.API.Inspection.SpecialistUnassigned> event_SpecialistUnassigned47:
                    aggregate = _inspectionDetailsProjection.Apply(event_SpecialistUnassigned47.Data, aggregate);
                    break;
            }

            return aggregate;
        }

    }

    // END: InspectionDetailsProjectionLiveAggregation927744616
    
    
    // START: InspectionDetailsProjectionInlineHandler927744616
    public class InspectionDetailsProjectionInlineHandler927744616 : Marten.Events.Aggregation.AggregationRuntime<CamabrS.API.Inspection.GettingDetails.InspectionDetails, System.Guid>
    {
        private readonly Marten.IDocumentStore _store;
        private readonly Marten.Events.Aggregation.IAggregateProjection _projection;
        private readonly Marten.Events.Aggregation.IEventSlicer<CamabrS.API.Inspection.GettingDetails.InspectionDetails, System.Guid> _slicer;
        private readonly Marten.Internal.Storage.IDocumentStorage<CamabrS.API.Inspection.GettingDetails.InspectionDetails, System.Guid> _storage;
        private readonly CamabrS.API.Inspection.GettingDetails.InspectionDetailsProjection _inspectionDetailsProjection;

        public InspectionDetailsProjectionInlineHandler927744616(Marten.IDocumentStore store, Marten.Events.Aggregation.IAggregateProjection projection, Marten.Events.Aggregation.IEventSlicer<CamabrS.API.Inspection.GettingDetails.InspectionDetails, System.Guid> slicer, Marten.Internal.Storage.IDocumentStorage<CamabrS.API.Inspection.GettingDetails.InspectionDetails, System.Guid> storage, CamabrS.API.Inspection.GettingDetails.InspectionDetailsProjection inspectionDetailsProjection) : base(store, projection, slicer, storage)
        {
            _store = store;
            _projection = projection;
            _slicer = slicer;
            _storage = storage;
            _inspectionDetailsProjection = inspectionDetailsProjection;
        }



        public override async System.Threading.Tasks.ValueTask<CamabrS.API.Inspection.GettingDetails.InspectionDetails> ApplyEvent(Marten.IQuerySession session, Marten.Events.Projections.EventSlice<CamabrS.API.Inspection.GettingDetails.InspectionDetails, System.Guid> slice, Marten.Events.IEvent evt, CamabrS.API.Inspection.GettingDetails.InspectionDetails aggregate, System.Threading.CancellationToken cancellationToken)
        {
            switch (evt)
            {
                case Marten.Events.IEvent<CamabrS.API.Inspection.InspectionClosed> event_InspectionClosed63:
                    aggregate ??= CreateDefault(evt);
                    aggregate = _inspectionDetailsProjection.Apply(event_InspectionClosed63.Data, aggregate);
                    return aggregate;
                case Marten.Events.IEvent<CamabrS.API.Inspection.InspectionCompleted> event_InspectionCompleted66:
                    aggregate ??= CreateDefault(evt);
                    aggregate = _inspectionDetailsProjection.Apply(event_InspectionCompleted66.Data, aggregate);
                    return aggregate;
                case Marten.Events.IEvent<CamabrS.API.Inspection.InspectionLocked> event_InspectionLocked59:
                    aggregate ??= CreateDefault(evt);
                    aggregate = _inspectionDetailsProjection.Apply(event_InspectionLocked59.Data, aggregate);
                    return aggregate;
                case Marten.Events.IEvent<CamabrS.API.Inspection.InspectionOpened> event_InspectionOpened67:
                    aggregate = CamabrS.API.Inspection.GettingDetails.InspectionDetailsProjection.Create(event_InspectionOpened67);
                    return aggregate;
                case Marten.Events.IEvent<CamabrS.API.Inspection.InspectionReopened> event_InspectionReopened65:
                    aggregate ??= CreateDefault(evt);
                    aggregate = _inspectionDetailsProjection.Apply(event_InspectionReopened65.Data, aggregate);
                    return aggregate;
                case Marten.Events.IEvent<CamabrS.API.Inspection.InspectionResultSubmitted> event_InspectionResultSubmitted61:
                    aggregate ??= CreateDefault(evt);
                    aggregate = _inspectionDetailsProjection.Apply(event_InspectionResultSubmitted61.Data, aggregate);
                    return aggregate;
                case Marten.Events.IEvent<CamabrS.API.Inspection.InspectionReviewed> event_InspectionReviewed64:
                    aggregate ??= CreateDefault(evt);
                    aggregate = _inspectionDetailsProjection.Apply(event_InspectionReviewed64.Data, aggregate);
                    return aggregate;
                case Marten.Events.IEvent<CamabrS.API.Inspection.InspectionSigned> event_InspectionSigned62:
                    aggregate ??= CreateDefault(evt);
                    aggregate = _inspectionDetailsProjection.Apply(event_InspectionSigned62.Data, aggregate);
                    return aggregate;
                case Marten.Events.IEvent<CamabrS.API.Inspection.InspectionUnlocked> event_InspectionUnlocked60:
                    aggregate ??= CreateDefault(evt);
                    aggregate = _inspectionDetailsProjection.Apply(event_InspectionUnlocked60.Data, aggregate);
                    return aggregate;
                case Marten.Events.IEvent<CamabrS.API.Inspection.SpecialistAssigned> event_SpecialistAssigned57:
                    aggregate ??= CreateDefault(evt);
                    aggregate = _inspectionDetailsProjection.Apply(event_SpecialistAssigned57.Data, aggregate);
                    return aggregate;
                case Marten.Events.IEvent<CamabrS.API.Inspection.SpecialistUnassigned> event_SpecialistUnassigned58:
                    aggregate ??= CreateDefault(evt);
                    aggregate = _inspectionDetailsProjection.Apply(event_SpecialistUnassigned58.Data, aggregate);
                    return aggregate;
            }

            return aggregate;
        }


        public CamabrS.API.Inspection.GettingDetails.InspectionDetails Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<CamabrS.API.Inspection.InspectionOpened> event_InspectionOpened56:
                    return CamabrS.API.Inspection.GettingDetails.InspectionDetailsProjection.Create(event_InspectionOpened56);
                    break;
            }

            return null;
        }

    }

    // END: InspectionDetailsProjectionInlineHandler927744616
    
    
}

