// <auto-generated/>
#pragma warning disable
using Marten;
using Marten.Events.Aggregation;
using Marten.Internal.Storage;
using System;
using System.Linq;

namespace Marten.Generated.EventStore
{
    // START: SingleStreamProjectionLiveAggregation1534053194
    public class SingleStreamProjectionLiveAggregation1534053194 : Marten.Events.Aggregation.SyncLiveAggregatorBase<CamabrS.API.Specialist.Specialist>
    {
        private readonly Marten.Events.Aggregation.SingleStreamProjection<CamabrS.API.Specialist.Specialist> _singleStreamProjection;

        public SingleStreamProjectionLiveAggregation1534053194(Marten.Events.Aggregation.SingleStreamProjection<CamabrS.API.Specialist.Specialist> singleStreamProjection)
        {
            _singleStreamProjection = singleStreamProjection;
        }



        public override CamabrS.API.Specialist.Specialist Build(System.Collections.Generic.IReadOnlyList<Marten.Events.IEvent> events, Marten.IQuerySession session, CamabrS.API.Specialist.Specialist snapshot)
        {
            if (!events.Any()) return null;
            CamabrS.API.Specialist.Specialist specialist = null;
            var usedEventOnCreate = snapshot is null;
            snapshot ??= Create(events[0], session);;
            if (snapshot is null)
            {
                usedEventOnCreate = false;
                snapshot = CreateDefault(events[0]);
            }

            foreach (var @event in events.Skip(usedEventOnCreate ? 1 : 0))
            {
                snapshot = Apply(@event, snapshot, session);
            }

            return snapshot;
        }


        public CamabrS.API.Specialist.Specialist Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            var byteArray = new System.Byte[]{};
            var guid = new System.Guid(byteArray);
            var specialist = new CamabrS.API.Specialist.Specialist(guid);
            switch (@event)
            {
                case Marten.Events.IEvent<CamabrS.API.Specialist.SpecialistCreated> event_SpecialistCreated74:
                    specialist = CamabrS.API.Specialist.Specialist.Create(event_SpecialistCreated74.Data);
                    break;
            }

            return null;
        }


        public CamabrS.API.Specialist.Specialist Apply(Marten.Events.IEvent @event, CamabrS.API.Specialist.Specialist aggregate, Marten.IQuerySession session)
        {
            return aggregate;
        }

    }

    // END: SingleStreamProjectionLiveAggregation1534053194
    
    
    // START: SingleStreamProjectionInlineHandler1534053194
    public class SingleStreamProjectionInlineHandler1534053194 : Marten.Events.Aggregation.AggregationRuntime<CamabrS.API.Specialist.Specialist, System.Guid>
    {
        private readonly Marten.IDocumentStore _store;
        private readonly Marten.Events.Aggregation.IAggregateProjection _projection;
        private readonly Marten.Events.Aggregation.IEventSlicer<CamabrS.API.Specialist.Specialist, System.Guid> _slicer;
        private readonly Marten.Internal.Storage.IDocumentStorage<CamabrS.API.Specialist.Specialist, System.Guid> _storage;
        private readonly Marten.Events.Aggregation.SingleStreamProjection<CamabrS.API.Specialist.Specialist> _singleStreamProjection;

        public SingleStreamProjectionInlineHandler1534053194(Marten.IDocumentStore store, Marten.Events.Aggregation.IAggregateProjection projection, Marten.Events.Aggregation.IEventSlicer<CamabrS.API.Specialist.Specialist, System.Guid> slicer, Marten.Internal.Storage.IDocumentStorage<CamabrS.API.Specialist.Specialist, System.Guid> storage, Marten.Events.Aggregation.SingleStreamProjection<CamabrS.API.Specialist.Specialist> singleStreamProjection) : base(store, projection, slicer, storage)
        {
            _store = store;
            _projection = projection;
            _slicer = slicer;
            _storage = storage;
            _singleStreamProjection = singleStreamProjection;
        }



        public override async System.Threading.Tasks.ValueTask<CamabrS.API.Specialist.Specialist> ApplyEvent(Marten.IQuerySession session, Marten.Events.Projections.EventSlice<CamabrS.API.Specialist.Specialist, System.Guid> slice, Marten.Events.IEvent evt, CamabrS.API.Specialist.Specialist aggregate, System.Threading.CancellationToken cancellationToken)
        {
            switch (evt)
            {
                case Marten.Events.IEvent<CamabrS.API.Specialist.SpecialistCreated> event_SpecialistCreated76:
                    aggregate = CamabrS.API.Specialist.Specialist.Create(event_SpecialistCreated76.Data);
                    return aggregate;
            }

            return aggregate;
        }


        public CamabrS.API.Specialist.Specialist Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            var byteArray = new System.Byte[]{};
            var guid = new System.Guid(byteArray);
            var specialist = new CamabrS.API.Specialist.Specialist(guid);
            switch (@event)
            {
                case Marten.Events.IEvent<CamabrS.API.Specialist.SpecialistCreated> event_SpecialistCreated75:
                    specialist = CamabrS.API.Specialist.Specialist.Create(event_SpecialistCreated75.Data);
                    break;
            }

            return null;
        }

    }

    // END: SingleStreamProjectionInlineHandler1534053194
    
    
}

